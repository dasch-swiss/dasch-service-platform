@startuml Domain Entities
package toplevel {
  ' TODO: add ID and type to each toplevel class

  class Project {
    ' TODO: does project need a "how to cite" too?
    The Project.
    -- Required Fields --
    .. (1) ..
    +ValueObject shortcode
    +ValueObject name
    +MultiLanguageText description
    +Date startDate

    .. (1 - n) ..
    +Dataset[] datasets
    +MultiLanguageText[] keywords
    +TextOrAuthorityRef[] disciplines
    +TextOrAuthorityRef[] temporalCoverage
    +AuthorityRef[] spatialCoverage
    +LegalBody[] funders

    .. (1 - 2) ..
    +URL[] urls
    ' TODO: do we want URL?

    -- Optional Fields --
    .. (0 - 1) ..
    +DataManagementPlan dataManagementPlan
    +Date endDate
    +LegalBody contactPoint

    .. (0 - n) ..
    +ValueObject[] publications
    +Grant[] grants
    +MultiLanguageText[] alternateNames
  }

  class Dataset {
    A Dataset belonging to the project.
    ' TODO
    -- Required Fields --
    .. (1) ..
    +ValueObject title
    +ValueObject conditionsOfAccess
    ' TODO: rename to accessConditions?
    +ValueObject howToCite
    +Status status

    .. (1 - n) ..
    +TextOrURL[] abstracts
    +TypesOfData[] typeOfData
    +URL[] licenses
    +MultiLanguageText[] languages
    +Attribution[] attributions

    -- Optional Fields --
    .. (0 - 1) ..
    +ValueObject alternativeTitle
    +Date datePublished
    +Date dateCreated
    +Date dateModified
    +URL distribution
    'TODO: do we need distribution?

    .. (0 - n) ..
    +AuthorityRef[] sameAs
    ' TODO: what is sameAs for a dataset?
    +TextOrURL[] documentations
  }

  class DataManagementPlan {
    .. (0 - 1) ..
    +boolean available
    +URL url
    ' TODO: do we want URL?
  }

  class Grant {
    A financial grant.
    -- Required Fields --
    .. (1 - n) ..
    +LegalBody funders

    -- Optional Fields --
    .. (0 - 1) ..
    +ValueObject number
    +MultiLanguageText name
    +URL url
    ' TODO: do we want URL?

  }

  class LegalBody {
    Struct representing either a Person or an Organization.
    -- Required: OneOf --
    +Person person
    +Organization organization
  }

  class Person {
    ' TODO
  }

  class Organization {
    An Organization.
    -- Required --
    .. (1 - n) ..
    + ValueObject[] names
    ' TODO: Or would that be Multilanguage?

    -- Optional --
    .. (0 - 1) ..
    +URL url
    ' TODO: do we want URL?
    +Address address
    +ValueObject email

  }

  class Address {
    Struct containing a postal address.
    -- Required --
    .. (1) ..
    +ValueObject street
    +ValueObject postalCode
    +ValueObject locality
    +ValueObject country

    -- Optional --
    .. (0 - 1) ..
    +ValueObject additional
    ' TODO: does that make sense like this?
  }

  class Attribution {
    Struct holding information on how work on a dataset can be attributed to a person.
    -- Required Fields --
    .. (1) ..
    +Person person
    .. (1 - n) ..
    +ValueObject[] roles
  }
  

}

package utility {

  class TextOrAuthorityRef {
    ' TODO: find better name
    Struct ensuring the object to be either a multi language text or an authority file reference.
    -- Required: OneOf --
    +AuthorityRef authorityRef
    +MultiLanguageText text
  }

  class TextOrURL {
    ' TODO: find better name
    Struct ensuring the object to be either a multi language text or an aURL.
    -- Required: OneOf --
    +URL url
    +MultiLanguageText text
  }

  class AuthorityRef {
    Reference to an external autority file.
    -- Required Fields --
    +ValueObject url
    ' TODO: would that be an URL?
    +ValueObject authority
  }

  class MultiLanguageText {
    Struct holding text in multiple different languages.
    -- Required Fields --
    +Map[ValueObject,ValueObject] text
  }

  class ValueObject {
    Struct holding exactly one value.
  }

  class URL {
    ' TODO: how do we handle this?
    ?
  }

  class Date {
    Struct holding an ISO-Date.
    -- Required Fields --
    .. (1) ..
    +ValueObject date
  }
  

  enum TypesOfData {
    XML
    Text
    Image
    Movie
    'TODO: should be "video"!
    Audio
  }

  enum Status {
    In_planning
    Ongoing
    On_hold
    Finished
  }

}


Project <--> Dataset
Project --> DataManagementPlan
Project --> Grant
Project --> LegalBody
Dataset --> Attribution
Attribution --> Person
Grant --> LegalBody
LegalBody --> Person
LegalBody --> Organization
Person --> Organization
Person --> Address
Organization --> Address
TextOrAuthorityRef --> MultiLanguageText
TextOrAuthorityRef --> AuthorityRef
TextOrURL --> URL
TextOrURL --> MultiLanguageText
AuthorityRef --> ValueObject
MultiLanguageText --> ValueObject

@enduml
