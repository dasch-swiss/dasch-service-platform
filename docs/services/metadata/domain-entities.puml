@startuml Domain Entities
package toplevel {

  class Project {
    The Project.
    -- Required Fields --
    .. (1) ..
    +UUID id
    +Type? type
    +Shortcode shortcode
    +String name
    +MultiLanguageText description
    +Date startDate

    .. (1 - n) ..
    +Dataset[] datasets
    +MultiLanguageText[] keywords
    +TextOrAuthorityRef[] disciplines
    +TextOrAuthorityRef[] temporalCoverages
    +AuthorityRef[] spatialCoverages
    +LegalBody[] funders

    .. (1 - 2) ..
    +URL[] urls

    -- Optional Fields --
    .. (0 - 1) ..
    +DataManagementPlan dataManagementPlan
    +Date endDate
    +LegalBody contactPoint

    .. (0 - n) ..
    +String[] publications
    +Grant[] grants
    +MultiLanguageText[] alternativeNames
  }

  class Dataset {
    A Dataset belonging to the project.
    -- Required Fields --
    .. (1) ..
    +UUID id
    +Type? type
    +String title
    +String accessConditions
    +String howToCite
    +Status status

    .. (1 - n) ..
    +TextOrURL[] abstracts
    +TypesOfData[] typesOfData
    +URL[] licenses
    +MultiLanguageText[] languages
    +Attribution[] attributions

    -- Optional Fields --
    .. (0 - 1) ..
    +Date datePublished
    +Date dateCreated
    +Date dateModified
    +URL distribution

    .. (0 - n) ..
    +MultiLanguageText[] alternativeTitles
    +URL[] urls
    +TextOrURL[] documentations
  }

  class DataManagementPlan {
    .. (1) ..
    +UUID id
    +Type? type

    .. (0 - 1) ..
    +boolean available
    +URL url

  }

  class Grant {
    A financial grant.
    -- Required Fields --
    .. (1 - n) ..
    +LegalBody[] funders

    -- Optional Fields --
    .. (0 - 1) ..
    +String number
    +MultiLanguageText name
    +URL url

  }

  interface LegalBody {
    Struct representing either a Person or an Organization.
    -- Required: OneOf --
    +Person person
    +Organization organization
  }

  class Person {
    A Person.
    -- Required --
    .. (1) ..
    +UUID id
    +Type? type

    .. (1 - n) ..
    +String[] jobTitles
    +String[] givenNames
    +String[] familyNames
    +Organization[] memberOf

    -- Optional --
    .. (0 - 1) ..
    +Address address

    .. (0 - 2) ..
    +Email[] emails

    .. (0 - n) ..
    +AuthorityRef[] externalAuthorityReferences

  }

  class Organization {
    An Organization.
    -- Required --
    .. (1) ..
    +UUID id
    +Type? type
    +String name

    -- Optional --
    .. (0 - 1) ..
    +URL url
    +Address address
    +Email email

    .. (0 - n) ..
    +MultiLanguageText[] alternativeNames
    +AuthorityRef[] externalAuthorityReferences

  }

  class Address {
    Struct containing a postal address.
    -- Required --
    .. (1) ..
    +String street
    +String postalCode
    +String locality
    +String country

    -- Optional --
    .. (0 - 1) ..
    +String additional

  }

  class Attribution {
    Struct holding information on how work on a dataset can be attributed to a person.
    -- Required Fields --
    .. (1) ..
    +Person person
    .. (1 - n) ..
    +String[] roles

  }
  

}

package valueobject {

  class Shortcode{
    +String shortcode
  }

  class Email{
    +String value
    {static} +URL newEmail()
    {static} +URL zeroEmail()
    ..
    +String string()
    +boolean equals()
  }

  class URL{
    {static} +URL newURL()
    {static} +URL zeroURL()
    ..
    +String value
    'TODO: more?
    +String string()
    +boolean equals()
  }

  class Date {
    Struct holding an ISO-Date.
    -- Required Fields --
    .. (1) ..
    +Date?String? date
  }

  class TextOrAuthorityRef {
    Struct ensuring the object to be either a multi language text or an authority file reference.
    -- Required: OneOf --
    +AuthorityRef authorityRef
    +MultiLanguageText text
  }

  class TextOrURL {
    Struct ensuring the object to be either a multi language text or an aURL.
    -- Required: OneOf --
    +URL url
    +MultiLanguageText text
  }

  class AuthorityRef {
    Reference to an external autority file.
    -- Required Fields --
    +URL url
    +String authority
  }

  class MultiLanguageText {
    Struct holding text in multiple different languages.
    -- Required Fields --
    +Map[ISOLanguage,String] text
  }

  class ISOLanguage {
    +String language
  }
}

package utility {

  enum TypesOfData {
    XML
    Text
    Image
    Movie
    Audio
  }

  enum Status {
    In_planning
    Ongoing
    On_hold
    Finished
  }

}

package externals {
  class uuid::UUID {
    Unique ID
  }
}


Project <..> Dataset
Project --> DataManagementPlan
Project --> Grant
Project --> LegalBody
Dataset --> Attribution
Attribution --> Person
Grant --> LegalBody
LegalBody --> Person
LegalBody --> Organization
Person --> Organization
Person --> Address
Organization --> Address

URL *-- TextOrURL
MultiLanguageText *-- TextOrURL
MultiLanguageText *-- TextOrAuthorityRef
AuthorityRef *-- TextOrAuthorityRef


@enduml
